package com.eic.springbootmicroservices.departmentservice.security;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.reactive.function.client.WebClient;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AllArgsConstructor;

@Component
@AllArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private JwtTokenProvider jwtTokenProvider;

    //private UserDetailsService userDetailsService;
    
    private WebClient webClient;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        //Get JWT token from request
        String token = getTokenFromRequest(request);

        //validate token
        try {
			if (StringUtils.hasText(token) && jwtTokenProvider.validateToken(token)){

				
				Claims claims = jwtTokenProvider.getClaims(token);
			    //get username from token
			    String username = jwtTokenProvider.getUsername(token);
			    
			    List<String> roles = getRolesFromAuthenticationService(username);
			    
			    Collection<? extends GrantedAuthority> authorities = roles.stream()
			    		.map(SimpleGrantedAuthority::new).collect(Collectors.toList());
			    //load user associated with the token
			    UserDetails userDetails = new CustomUserDetails(username, authorities);

			    UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
			            userDetails,
			            null,
			            userDetails.getAuthorities()
			    );

			    usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

			    SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
			}
		} catch (UsernameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

        filterChain.doFilter(request,response);


    }

    private String getTokenFromRequest(HttpServletRequest request){
        String bearerToken = request.getHeader("Authorization");

        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")){
            return bearerToken.substring(7,bearerToken.length());
        }
        return null;
    }
    private List<String> getRolesFromAuthenticationService(String username) {
    	ResponseEntity<List<String>> responseEntity = webClient.get()
                .uri("http://localhost:9191/user-service/api/user/roles?email=" + username)
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<ResponseEntity<List<String>>>() {})
                .block();

        return responseEntity.getBody();
    }
}
